"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[716],{1265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=t(5893),s=t(1151);const l={title:"Event Node",sidebar_position:4},o=void 0,d={id:"jungle-nodes/event-node",title:"Event Node",description:"The Event Node is a powerful node type in Jungle. The Event Node has zero inputs and outputs to any number of outputs",source:"@site/docs/jungle-nodes/event-node.md",sourceDirName:"jungle-nodes",slug:"/jungle-nodes/event-node",permalink:"/docs/jungle-nodes/event-node",draft:!1,unlisted:!1,editUrl:"https://github.com/Jacked-Up/junglesequencer.com/tree/prod/docs/jungle-nodes/event-node.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Event Node",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Generic Node",permalink:"/docs/jungle-nodes/generic-node"},next:{title:"Custom Node Inspectors",permalink:"/docs/jungle-nodes/advanced/custom-node-inspectors"}},i={},c=[{value:"Result in the Jungle Editor",id:"result-in-the-jungle-editor",level:4},{value:"Code Reference",id:"code-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Events",id:"events",level:3},{value:"Methods",id:"methods",level:3},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Event Node is a powerful node type in Jungle. The Event Node has zero inputs and outputs to any number of outputs\r\nthat all can output any types."}),"\n",(0,r.jsx)(n.p,{children:"Event Nodes are called when the Jungle Tree is started."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["All Event Nodes are required to have a ",(0,r.jsx)(n.code,{children:"EventNode"})," class attribute defined. This attribute defines the output ports on\r\nthe node."]}),"\n",(0,r.jsxs)(n.p,{children:["Here's a list of all the properties you can define in the ",(0,r.jsx)(n.code,{children:"EventNode"})," attribute:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortNames"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string[]"})}),(0,r.jsx)(n.td,{children:"Defines the names for each output port"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortTypes"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type[]"})}),(0,r.jsx)(n.td,{children:"Defines the outputted type for each port"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The output port names and types should be defined in the same order and should always be the same length. You are\r\nlimited to 256 output ports per node."}),"\n",(0,r.jsxs)(n.p,{children:["Here's an example of a ",(0,r.jsx)(n.code,{children:"EventNode"})," attribute:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[EventNode(\r\n    OutputPortNames = new string[] { "My Output A",     "My Output B" },\r\n    OutputPortTypes = new Type[]   { typeof(Port.None), typeof(Port.None) }\r\n)]\r\npublic class MyEventNode : EventNode\r\n...\n'})}),"\n",(0,r.jsx)(n.h4,{id:"result-in-the-jungle-editor",children:"Result in the Jungle Editor"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Event node attribute visual",src:t(4487).Z+"",width:"285",height:"198"})}),"\n",(0,r.jsx)(n.admonition,{title:"WHERE IS THE INPUT TYPE DEFINED?",type:"info",children:(0,r.jsxs)(n.p,{children:["Simply put, ",(0,r.jsx)(n.strong,{children:"it's not"}),". The Event Node has no input ports, so an input type doesn't ever need to be defined."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"code-reference",children:"Code Reference"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Namespace: ",(0,r.jsx)(n.code,{children:"Jungle"})]})}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"JungleTree"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleTree JungleTree { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Reference to the nodes Jungle Tree."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OutputPorts"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public Port[] OutputPorts { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"List of the nodes output ports."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"IsRunning"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool IsRunning { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"True if the node is currently running."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Nothing"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public static readonly Port.None Nothing"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Equivalent to new Port.None()."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetTitle()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public string GetTitle()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns the nodes title."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetDescription()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public string GetDescription()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns a brief description of the nodes function."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetCategory()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public string GetCategory()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns the nodes category."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetColor()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public Color GetColor()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns the nodes accent color."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetIcon()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public Texture GetIcon()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns the nodes icon."})]}),"\n",(0,r.jsx)(n.admonition,{title:"EDITOR ONLY",type:"info",children:(0,r.jsx)(n.p,{children:"Fetching the Jungle Nodes icon only works in the Unity editor. In a build, this will return a blank white texture."})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetUid()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public string GetUid()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns the nodes unique id."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"IsDeprecated()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool IsDeprecated()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns true if the node is declared deprecated."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetInputPortInfo()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public override Port.Info GetInputPortInfo()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns info about the nodes input port."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetOutputPortsInfo()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public override Port.Info[] GetOutputPortsInfo()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns info about the nodes output ports."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnValidated"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public Action<bool> OnValidated"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Called when the node is validated. Callback is true if issues were detected."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnStart()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"protected abstract void OnStart()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Called immediately when the Jungle Tree is started."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnUpdate()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"protected abstract void OnUpdate()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsxs)(n.em,{children:["Called every frame while the node is running. Always called after ",(0,r.jsx)(n.strong,{children:"OnStart"}),"."]})]}),"\n",(0,r.jsx)(n.admonition,{title:"REQUIRED",type:"info",children:(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.strong,{children:"OnStart"})," and ",(0,r.jsx)(n.strong,{children:"OnUpdate"})," are required methods in all Jungle Nodes. Your code ",(0,r.jsx)(n.strong,{children:"will not"})," compile without them."]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnStop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"protected virtual void OnStop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Called immediately after this node is stopped."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetDetails()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public override string GetDetails()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Override this and return the information you would like to display in the Jungle Editor."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnValidation()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"protected virtual Issue[] OnValidation()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsxs)(n.em,{children:["Called whenever a validation pass is performed on this node. Return any issues in your script here to display\r\nthem inside the ",(0,r.jsx)(n.a,{href:"/docs/using-the-editor/jungle-validator",children:"Jungle Validator"}),"."]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["CallAndStop(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Port.Call[]"}),")"]})," ",(0,r.jsx)(n.em,{children:"or"}),"\r\n",(0,r.jsxs)("span",{class:"DocItemTitle",children:["CallAndStop(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Port.Call"}),")"]}),"\r\n",(0,r.jsx)("br",{}),"1: ",(0,r.jsx)(n.code,{children:"protected void CallAndStop(Port.Call[] calls)"}),"\r\n",(0,r.jsx)("br",{}),"2: ",(0,r.jsx)(n.code,{children:"protected void CallAndStop(Port.Call call)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Both sends port call(s) to the requested ports and stops the node."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["Call(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Port.Call[]"}),")"]})," ",(0,r.jsx)(n.em,{children:"or"}),"\r\n",(0,r.jsxs)("span",{class:"DocItemTitle",children:["Call(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Port.Call"}),")"]}),"\r\n",(0,r.jsx)("br",{}),"1: ",(0,r.jsx)(n.code,{children:"protected void Call(Port.Call[] calls)"}),"\r\n",(0,r.jsx)("br",{}),"2: ",(0,r.jsx)(n.code,{children:"protected void Call(Port.Call call)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Sends out port call(s) to the requested ports on this node."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Stop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"protected void Stop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Stops the node without sending any port calls."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"boilerplate",children:"Boilerplate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n[NodeProperties(\r\n    Title = "Event Node",\r\n    Description = "No inputs, multiple outputs."\r\n)]\r\n[EventNode(\r\n    OutputPortNames = new []{ "Output A",        "Output B"        },\r\n    OutputPortTypes = new []{ typeof(Port.None), typeof(Port.None) }\r\n)]\r\npublic class MyEventNode : EventNode\r\n{\r\n    protected override void OnStart()\r\n    {\r\n        CallAndStop(new []\r\n        {\r\n            new Port.Call(0, Nothing),\r\n            new Port.Call(1, Nothing)\r\n        });\r\n    }\r\n    \r\n    protected override void OnUpdate() { }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a simple example of an Event Node that calls different outputs at 5, 10, and 15 seconds intervals."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\nusing UnityEngine;\r\n\r\n[NodeProperties(\r\n    Title = "Timed Intervals",\r\n    Description = "Calls different outputs at 5, 10, and 15 seconds intervals.",\r\n    Color = Yellow\r\n)]\r\n[EventNode(\r\n    OutputPortNames = new string[] { "After 5 Seconds", "After 10 Seconds", "After 15 Seconds" },\r\n    OutputPortTypes = new Type[]   { typeof(Port.None), typeof(Port.None),  typeof(Port.None)  }\r\n)]\r\npublic class TimedIntervalsNode : EventNode\r\n{\r\n    private float _startTime;\r\n    private bool _called5Seconds;\r\n    private bool _called10Seconds;\r\n    private bool _called15Seconds;\r\n    \r\n    protected override void OnStart()\r\n    {\r\n        _startTime = Time.time;\r\n        \r\n        _called5Seconds = false;\r\n        _called10Seconds = false;\r\n        _called15Seconds = false;\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n        float elapsedTime = Time.time - _startTime;\r\n\r\n        // After 5 seconds\r\n        if (!_called5Seconds && elapsedTime >= 5)\r\n        {\r\n            Call(new Port.Call(0, new Port.None()));\r\n            _called5Seconds = true;\r\n        }\r\n        \r\n        // After 10 seconds\r\n        if (!_called10Seconds && elapsedTime >= 10)\r\n        {\r\n            Call(new Port.Call(1, new Port.None()));\r\n            _called10Seconds = true;\r\n        }\r\n        \r\n        // After 15 seconds\r\n        if (!_called15Seconds && elapsedTime >= 15)\r\n        {\r\n            CallAndStop(new Port.Call(2, new Port.None()));\r\n            _called15Seconds = true;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["As shown in the example above, the output ports are named ",(0,r.jsx)(n.strong,{children:"After 5 Seconds"}),", ",(0,r.jsx)(n.strong,{children:"After 10 Seconds"}),", and ",(0,r.jsx)(n.strong,{children:"After 15\r\nSeconds"})," and all output ",(0,r.jsx)(n.strong,{children:"nothing"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"With this setup, the node will call the first output after 5 seconds, the second output after 10 seconds, and the third\r\noutput after 15 seconds."}),"\n",(0,r.jsx)(n.p,{children:"This configuration is useful for creating timed events in your Jungle Tree."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Timed intervals node visual",src:t(9755).Z+"",width:"330",height:"243"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},4487:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/event-node-attribute-visual-751a5653d51918732c4fedc2a3076a50.png"},9755:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/event-node-example-f53891ffb465764e814f6387c315915f.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>o});var r=t(7294);const s={},l=r.createContext(s);function o(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);