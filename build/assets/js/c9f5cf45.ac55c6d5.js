"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[620],{3117:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=r(5893),o=r(1151);const i={title:"Custom Node Inspectors",sidebar_position:1},s=void 0,d={id:"jungle-nodes/advanced/custom-node-inspectors",title:"Custom Node Inspectors",description:"Building custom node inspectors is a great way to add custom functionality to your nodes. Creating custom node",source:"@site/docs/jungle-nodes/advanced/custom-node-inspectors.md",sourceDirName:"jungle-nodes/advanced",slug:"/jungle-nodes/advanced/custom-node-inspectors",permalink:"/docs/jungle-nodes/advanced/custom-node-inspectors",draft:!1,unlisted:!1,editUrl:"https://github.com/Jacked-Up/junglesequencer.com/docs/jungle-nodes/advanced/custom-node-inspectors.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Custom Node Inspectors",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Event Node",permalink:"/docs/jungle-nodes/event-node"},next:{title:"Custom Node Types",permalink:"/docs/jungle-nodes/advanced/custom-node-types"}},a={},c=[{value:"Creating a Custom Inspector",id:"creating-a-custom-inspector",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Displaying Properties",id:"displaying-properties",level:3},{value:"Example",id:"example",level:4},{value:"Example",id:"example-1",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Building custom node inspectors is a great way to add custom functionality to your nodes. ",(0,t.jsx)(n.strong,{children:"Creating custom node\r\ninspectors works exactly like build custom inspectors for Mono Behaviours and Scriptable Objects."})]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-custom-inspector",children:"Creating a Custom Inspector"}),"\n",(0,t.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["A custom inspector is a class that inherits from ",(0,t.jsx)(n.code,{children:"UnityEditor.Editor"}),". This class is then attached to your node script\r\nusing the ",(0,t.jsx)(n.code,{children:"UnityEditor.CustomEditor"})," attribute."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[UnityEditor.CustomEditor(typeof(MyClass))]\r\npublic class MyEditor : UnityEditor.Editor\r\n{\r\n    // Editor code here\r\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["All editor classes should be placed between ",(0,t.jsx)(n.code,{children:"#if UNITY_EDITOR"})," and ",(0,t.jsx)(n.code,{children:"#endif"})," tags. This ensures that the editor code is\r\nstripped from the build. If you do not do this, your build will ",(0,t.jsx)(n.strong,{children:"fail"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"displaying-properties",children:"Displaying Properties"}),"\n",(0,t.jsxs)(n.p,{children:["To display a property in your custom inspector, you must first fetch the property using the\r\n",(0,t.jsx)(n.code,{children:"UnityEditor.SerializedObject.FindProperty"})," method. This method takes the name of the property as a string."]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class MyClass : MonoBehaviour\r\n{\r\n    [SerializeField] \r\n    private float myProperty = 1f;\r\n    // ^^ This is the property ^^\r\n    //    we want to display in\r\n    //    the custom inspector\r\n}\r\n\r\n#if UNITY_EDITOR\r\n[UnityEditor.CustomEditor(typeof(MyClass))]\r\npublic class MyEditor : UnityEditor.Editor\r\n{\r\n    private UnityEditor.SerializedProperty _myProperty;\r\n\r\n    private void OnEnable()\r\n    {\r\n        // Fetch the property. This method takes the name of the property as a string\r\n        _myProperty = serializedObject.FindProperty("myProperty");\r\n    }\r\n    \r\n    public override void OnInspectorGUI()\r\n    {\r\n        serializedObject.Update();\r\n        \r\n        // Display the property\r\n        UnityEditor.EditorGUILayout.PropertyField(_myProperty);\r\n        \r\n        serializedObject.ApplyModifiedProperties();\r\n    }\r\n}\r\n#endif\n'})}),"\n",(0,t.jsx)(n.p,{children:"Jungle will automatically detect that you have a custom inspector and display it in the Jungle Editor."}),"\n",(0,t.jsx)(n.admonition,{title:"NOTE",type:"info",children:(0,t.jsxs)(n.p,{children:["The custom inspector class does ",(0,t.jsx)(n.strong,{children:"not"})," need to be in the same file as the node script. You can throw it where ever you\r\nwant."]})}),"\n",(0,t.jsxs)(n.p,{children:["The Unity editor class is a great way to add custom functionality to your nodes. You can add buttons, sliders, and more\r\nto your custom inspector. ",(0,t.jsx)(n.strong,{children:"The sky is the limit!"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.unity3d.com/Manual/UIE-HowTo-CreateCustomInspector.html",children:"Unity Guide on Custom Inspectors"})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Here's an example of a custom inspector for a node that inherits from ",(0,t.jsx)(n.code,{children:"IdentityNode"}),". This inspector displays a label\r\nand a property field for the ",(0,t.jsx)(n.code,{children:"value"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\nusing UnityEngine;\r\n\r\n[NodeProperties(\r\n    Title = "My Node",\r\n    Description = "You friendly neighborhood node.",\r\n    Category = "",\r\n    Color = Blue\r\n)]\r\n[IdentityNode(\r\n    InputPortName = "Start",\r\n    OutputPortName = "Next"\r\n)]\r\npublic class MyNode : IdentityNode\r\n{\r\n    [SerializeField] \r\n    private float value = 1f;\r\n    \r\n    protected override void OnStart()\r\n    {\r\n        CallAndStop();\r\n    }\r\n\r\n    protected override void OnUpdate() { }\r\n}\r\n\r\n// ------------------------------------CUSTOM-NODE-INSPECTOR------------------------------------\r\n// The UNITY_EDITOR tag ensures that the editor code is stripped from the build\r\n#if UNITY_EDITOR\r\n[UnityEditor.CustomEditor(typeof(MyNode))]\r\npublic class MyNodeEditor : UnityEditor.Editor\r\n{\r\n    #region Variables\r\n\r\n    private UnityEditor.SerializedProperty _value;\r\n\r\n    #endregion\r\n\r\n    private void OnEnable()\r\n    {\r\n        _value = serializedObject.FindProperty("value");\r\n    }\r\n\r\n    public override void OnInspectorGUI()\r\n    {\r\n        serializedObject.Update();\r\n        UnityEditor.EditorGUILayout.Label("Hello, World!");\r\n        UnityEditor.EditorGUILayout.PropertyField(_value);\r\n        serializedObject.ApplyModifiedProperties();\r\n    }\r\n}\r\n#endif\r\n// ------------------------------------CUSTOM-NODE-INSPECTOR------------------------------------\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>s});var t=r(7294);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);