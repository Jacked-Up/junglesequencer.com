"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[935],{9349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var r=t(5893),s=t(1151);const i={title:"IO Node<T>",sidebar_position:2},l=void 0,d={id:"jungle-nodes/io-node",title:"IO Node<T>",description:"The IO Node is a simpler version of the Branch Node. It takes a single input of any type, and outputs to a single output",source:"@site/docs/jungle-nodes/io-node.md",sourceDirName:"jungle-nodes",slug:"/jungle-nodes/io-node",permalink:"/docs/jungle-nodes/io-node",draft:!1,unlisted:!1,editUrl:"https://github.com/Jacked-Up/junglesequencer.com/tree/prod/docs/jungle-nodes/io-node.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"IO Node<T>",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Branch Node<T>",permalink:"/docs/jungle-nodes/branch-node"},next:{title:"Generic Node",permalink:"/docs/jungle-nodes/identity-node"}},o={},a=[{value:"API",id:"api",level:2},{value:"Methods",id:"methods",level:3},{value:"Abstract",id:"abstract",level:4},{value:"Virtual",id:"virtual",level:4},{value:"Calls",id:"calls",level:4},{value:"Properties",id:"properties",level:3},{value:"Attribute",id:"attribute",level:2},{value:"Attribute Example",id:"attribute-example",level:4},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The IO Node is a simpler version of the Branch Node. It takes a single input of any type, and outputs to a single output\r\nof any type."}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using Jungle;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"abstract",children:"Abstract"}),"\n",(0,r.jsxs)(n.p,{children:["Called immediately when the IO Node is called by another node.\r\n",(0,r.jsx)("br",{}),"The ",(0,r.jsx)(n.strong,{children:"inputValue"})," parameter is the value passed in from the node that called this node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected abstract void OnStart(in object inputValue);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Called every frame while the IO Node is running. Always called after ",(0,r.jsx)(n.strong,{children:"OnStart"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected abstract void OnUpdate();\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.strong,{children:"OnStart"})," and ",(0,r.jsx)(n.strong,{children:"OnUpdate"})," are required methods in all Jungle Nodes. Your code ",(0,r.jsx)(n.strong,{children:"will not"})," compile without them."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"virtual",children:"Virtual"}),"\n",(0,r.jsx)(n.p,{children:"Called immediately after this IO Node is stopped."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected virtual void OnStop() {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Called whenever a validation is requested on this IO Node.\r\n",(0,r.jsx)("br",{}),"Should return any issues found with this node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected virtual Issue[] OnValidation() {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Override this if you want to add dynamic node context in the Jungle Editor.\r\n",(0,r.jsx)("br",{}),"Called on ",(0,r.jsx)(n.em,{children:"every"})," validation pass."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override string GetDetails() {}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"calls",children:"Calls"}),"\n",(0,r.jsx)(n.p,{children:"Sends the output value to any nodes connected to this IO Node's output."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void Call(object outputValue)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Stops the IO Node without sending out any output value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void Stop()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Both sends the output value to any nodes connected to this IO Node's output and stops the IO Node."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void CallAndStop(object outputValue)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.p,{children:"Reference to the nodes Jungle Tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public JungleTree JungleTree { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"List of the Jungle Nodes output ports."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Port[] OutputPorts { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Called when the Jungle Node is validated. Callback is true if issues were detected."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Action<bool> OnValidated\n"})}),"\n",(0,r.jsx)(n.p,{children:"True if the Jungle Node is currently running."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsRunning { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes title."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetTitle()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a brief description of the Jungle Nodes function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetDescription()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes category."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetCategory()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes accent color."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Color GetColor()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes script icon."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Texture GetIcon()\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"EDITOR ONLY",type:"warning",children:(0,r.jsx)(n.p,{children:"Fetching the Jungle Nodes icon only works in the Unity editor. In a build, this will return a blank white texture."})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes unique id."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetUid()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns true if the Jungle Node is declared deprecated."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsDeprecated()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns true if the Jungle Node is limited to one instance per Jungle Tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsLimitedOnePerTree()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns info about the Jungle Nodes input port."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override Port.Info GetInputPortInfo()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns info about the Jungle Nodes output ports."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override Port.Info[] GetOutputPortsInfo()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"attribute",children:"Attribute"}),"\n",(0,r.jsxs)(n.p,{children:["All IO Nodes are required to have an ",(0,r.jsx)(n.code,{children:"IONode"})," class attribute defined. This attribute defines the input port and\r\noutput port on the node."]}),"\n",(0,r.jsxs)(n.p,{children:["Here's a list of all the properties you can define in the ",(0,r.jsx)(n.code,{children:"IONode"})," attribute:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"InputPortName"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Defines the name of the input port."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"InputPortType"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Type"})}),(0,r.jsx)(n.td,{children:"Defines ports accepted type."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortName"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Defines the name of the output port."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortType"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Type"})}),(0,r.jsx)(n.td,{children:"Defines the ports outputted type."})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[IONode(\r\n    InputPortName = "My Input",\r\n    InputPortType = typeof(Port.None),\r\n    OutputPortName = "My Output",\r\n    OutputPortType = typeof(Port.None)\r\n)]\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The input port would be named ",(0,r.jsx)(n.em,{children:'"My Input"'})," and would accept the type ",(0,r.jsx)(n.em,{children:'"Port.None"'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The output port would be named ",(0,r.jsx)(n.em,{children:'"My Output"'})," and would output the type ",(0,r.jsx)(n.em,{children:'"Port.None"'}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"attribute-example",children:"Attribute Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[NodeProperties(\r\n    ...\r\n)]\r\n[IONode(\r\n    InputPortName = "Value",\r\n    InputPortType = typeof(float),\r\n    OutputPortName = "Value * 2",\r\n    OutputPortType = typeof(float)\r\n)]\r\npublic class MultiplyByTwoNode : IONode\r\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we defined ",(0,r.jsx)(n.strong,{children:"MultiplyByTwoNode"}),"'s input port to be named ",(0,r.jsx)(n.strong,{children:"Value"})," and accept type ",(0,r.jsx)(n.strong,{children:"float"}),". We\r\nalso defined an output port named ",(0,r.jsx)(n.strong,{children:"Value * 2"})," that outputs type ",(0,r.jsx)(n.strong,{children:"float"}),". With this setup, we could create the logic\r\nin this class so that it would call output port ",(0,r.jsx)(n.strong,{children:"Value * 2"})," with the input value multiplied by two."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"boilerplate",children:"Boilerplate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n[NodeProperties(\r\n    Title = "My IO Node",\r\n    Description = "Example implementation of an IO node.",\r\n    Category = "Nodes/IO Node",\r\n    Color = Yellow\r\n)]\r\n[IONode(\r\n    InputPortName = "Input",\r\n    InputPortType = typeof(Port.None),\r\n    OutputPortName = "Output",\r\n    OutputPortType = typeof(Port.None)\r\n)]\r\npublic class MyIONode : IONode\r\n{\r\n    protected override void OnStart(in object inputValue)\r\n    {\r\n        CallAndStop(new Port.None());\r\n    }\r\n    \r\n    protected override void OnUpdate()\r\n    {\r\n        \r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a simple example of an IO Node that reverses the inputted string and outputs it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n[NodeProperties(\r\n    Title = "String Reverser",\r\n    Description = "Reverses the characters in a string.",\r\n    Category = "Nodes/String Operations",\r\n    Color = JungleNode.Teal\r\n)]\r\n[IONode(\r\n    InputPortName = "Input String",\r\n    InputPortType = typeof(string),\r\n    OutputPortName = "Reversed String",\r\n    OutputPortType = typeof(string)\r\n)]\r\npublic class StringReverserNode : IONode\r\n{\r\n    protected override void OnStart(in object inputValue)\r\n    {\r\n        if (inputValue is string inputString)\r\n        {\r\n            // Reverse the input string\r\n            string reversedString = ReverseString(inputString);\r\n            CallAndStop(reversedString);\r\n        }\r\n        else Stop();\r\n    }\r\n    \r\n    protected override void OnUpdate() { }\r\n    \r\n    private string ReverseString(string str)\r\n    {\r\n        char[] charArray = str.ToCharArray();\r\n        Array.Reverse(charArray);\r\n        return new string(charArray);\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>l});var r=t(7294);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);