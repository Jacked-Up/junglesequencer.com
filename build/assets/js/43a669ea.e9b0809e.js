"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[8657],{2509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(5893),i=t(1151);const s={title:"Creating a Node",sidebar_position:5,slug:"/guides/creating-a-node"},d=void 0,o={id:"guides/creating-a-node",title:"Creating a Node",description:"Learning how to create your own nodes is a crucial part of using Jungle.",source:"@site/docs/guides/creating-a-node.mdx",sourceDirName:"guides",slug:"/guides/creating-a-node",permalink:"/docs/guides/creating-a-node",draft:!1,unlisted:!1,editUrl:"https://github.com/Jacked-Up/junglesequencer.com/tree/prod/docs/guides/creating-a-node.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Creating a Node",sidebar_position:5,slug:"/guides/creating-a-node"},sidebar:"guidesSidebar",previous:{title:"Creating a Tree",permalink:"/docs/guides/creating-a-tree"},next:{title:"Using the Jungle Validator",permalink:"/docs/guides/using-the-jungle-validator"}},a={},l=[{value:"LEGO Analogy",id:"lego-analogy",level:4},{value:"Node Variants",id:"node-variants",level:2},{value:"But What if I Want More Than One Input?",id:"but-what-if-i-want-more-than-one-input",level:4},{value:"Creating a Node",id:"creating-a-node",level:2},{value:"Identity Node",id:"identity-node",level:3},{value:"IO Node",id:"io-node",level:3},{value:"Branch Node",id:"branch-node",level:3},{value:"Event Node",id:"event-node",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Learning how to create your own nodes is a crucial part of using Jungle.\r\nThis guide will walk you through the process of creating a new node in each variant."}),"\n",(0,r.jsxs)(n.p,{children:["It's recommended you read the ",(0,r.jsx)(n.a,{href:"/docs/concepts",children:"Concepts"})," page before continuing."]}),"\n",(0,r.jsx)(n.h4,{id:"lego-analogy",children:"LEGO Analogy"}),"\n",(0,r.jsx)(n.p,{children:"Think of nodes as LEGO blocks. Each block is a small piece of a larger set. Each block should be able to be used in as\r\nmany different sets as possible. This is the same for nodes. Each node should be able to be used in as many trees as\r\npossible."}),"\n",(0,r.jsx)(n.p,{children:"If a LEGO block was too specific and only makes sense in a single set, it wouldn't be very useful.\r\nThe same goes for nodes. Always make sure to split your tasks into separate, more modular and reusable nodes."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"node-variants",children:"Node Variants"}),"\n",(0,r.jsx)(n.p,{children:"Jungle has four node variants to choose from. Each variant has its own unique use case, but they all work the same way."}),"\n",(0,r.jsx)(n.p,{children:"Choosing the right variant for your node is important. Here's a quick overview of each variant:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Branch Node:"})," A node with one input and multiple outputs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IO Node:"})," A node with one input and one output."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Identity Node:"})," A node with one input and one output, but the input and output type can be anything."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Node:"})," A node with no inputs and multiple outputs."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"but-what-if-i-want-more-than-one-input",children:"But What if I Want More Than One Input?"}),"\n",(0,r.jsx)(n.p,{children:"If your node needs multiple inputs, more than likely, you're likely using Jungle in the wrong way. Due to how the Jungle\r\nruntime works, as soon as a node is started, all port call data should be available."}),"\n",(0,r.jsxs)(n.p,{children:["While it would be totally possible to implement another parameter to the ",(0,r.jsx)(n.code,{children:"OnStart"})," method that could explicitly mark the\r\ninputted data and mark which input it came from, this would make Jungle more of a visual scripter than a sequencer."]}),"\n",(0,r.jsx)(n.admonition,{title:"PASSING MULTIPLE VALUES THROUGH A SINGLE PORT",type:"tip",children:(0,r.jsxs)(n.p,{children:["If you just want to pass multiple values through the same port, you can always just use a\r\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples",children:"Tuple"})})]})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-node",children:"Creating a Node"}),"\n",(0,r.jsx)(n.p,{children:"Nodes are simply just C# scripts. The visual appearance of the node is defined in attributes added to the class.\r\nJungle will automatically detect your node scripts and visualize them in the editor."}),"\n",(0,r.jsx)(n.p,{children:"Here are the steps to creating each node variant:"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"identity-node",children:"Identity Node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 1:"})," Create a new C# script and name it whatever you want."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['It\'s recommended to add a "Node" suffix to the script name. (Ex: ',(0,r.jsx)(n.code,{children:"BlahBlahNode.cs"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step 2:"})," Inherit from the ",(0,r.jsx)(n.code,{children:"IdentityNode"})," class."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using Jungle;\r\n\r\npublic class MyIdentityNode : IdentityNode // <-- Inherit from IdentityNode\r\n{\r\n\r\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 3:"})," Implement the ",(0,r.jsx)(n.code,{children:"OnStart"})," and ",(0,r.jsx)(n.code,{children:"OnUpdate"})," method."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using Jungle;\r\n\r\npublic class MyIdentityNode : IdentityNode\r\n{\r\n    // --------------------------------\r\n    protected override void OnStart()\r\n    {\r\n        // Implement the OnStart method\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n        // Implement the OnUpdate method\r\n    }\r\n    // --------------------------------\r\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 4:"})," Add the ",(0,r.jsx)(n.code,{children:"IdentityNode"})," attribute to the class.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This attribute is used to define the input and output port names."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"InputPortName"})," and ",(0,r.jsx)(n.code,{children:"OutputPortName"})," properties are optional."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n// --------------------------------\r\n[IdentityNode(\r\n    InputPortName = "My Input",\r\n    OutputPortName = "My Output"\r\n)]\r\n// --------------------------------\r\npublic class MyIdentityNode : IdentityNode\r\n{\r\n    protected override void OnStart()\r\n    {\r\n\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n\r\n    }\r\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{title:"DON'T WANT THE OUTPUT PORT?",type:"tip",children:[(0,r.jsxs)(n.p,{children:["You can define the ",(0,r.jsx)(n.code,{children:"OutputPortName"})," property as null if you want to remove the output port."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n[IdentityNode(\r\n    InputPortName = "",\r\n    OutputPortName = null\r\n)]\r\npublic class QuitNode : IdentityNode\r\n...\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Identity node without an output port",src:t(9428).Z+"",width:"503",height:"205"})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 5:"})," Add the ",(0,r.jsx)(n.code,{children:"NodeProperties"})," attribute to the class."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n// --------------------------------\r\n[NodeProperties(\r\n    Title = "My Identity Node",\r\n    Description = "This is an identity node.",\r\n    Category = "My Nodes/Identity",\r\n    Color = Green\r\n)]\r\n// --------------------------------\r\n[IdentityNode(\r\n    InputPortName = "My Input",\r\n    OutputPortName = "My Output"\r\n)]\r\npublic class MyIdentityNode : IdentityNode\r\n{\r\n    protected override void OnStart()\r\n    {\r\n\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"io-node",children:"IO Node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 1:"})," Create a new C# script and name it whatever you want.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['It\'s recommended to add a "Node" suffix to the script name. (Ex: ',(0,r.jsx)(n.code,{children:"BlahBlahNode.cs"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"branch-node",children:"Branch Node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 1:"})," Create a new C# script and name it whatever you want.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['It\'s recommended to add a "Node" suffix to the script name. (Ex: ',(0,r.jsx)(n.code,{children:"BlahBlahNode.cs"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"event-node",children:"Event Node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Step 1:"})," Create a new C# script and name it whatever you want.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['It\'s recommended to add a "Node" suffix to the script name. (Ex: ',(0,r.jsx)(n.code,{children:"BlahBlahNode.cs"}),")."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9428:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/identity-node-without-an-output-port-b71079cab9173f75a5abb74aa4a0583c.jpg"},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>d});var r=t(7294);const i={},s=r.createContext(i);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);