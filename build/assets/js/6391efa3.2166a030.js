"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[8583],{3512:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=s(5893),t=s(1151);const i={title:"Jungle Tree",sidebar_position:3,slug:"/jungle-tree"},d=void 0,l={id:"documentation/jungle-tree",title:"Jungle Tree",description:"Introduction",source:"@site/docs/documentation/jungle-tree.mdx",sourceDirName:"documentation",slug:"/jungle-tree",permalink:"/docs/jungle-tree",draft:!1,unlisted:!1,editUrl:"https://github.com/Jacked-Up/junglesequencer.com/tree/prod/docs/documentation/jungle-tree.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Jungle Tree",sidebar_position:3,slug:"/jungle-tree"},sidebar:"documentationSidebar",previous:{title:"Event Node",permalink:"/docs/jungle-nodes/event-node"},next:{title:"Jungle Manifest",permalink:"/docs/jungle-manifest"}},c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Creating Jungle Trees",id:"creating-jungle-trees",level:2},{value:"Using Jungle Trees",id:"using-jungle-trees",level:2},{value:"Code Reference",id:"code-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Events",id:"events",level:3},{value:"Methods",id:"methods",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"Jungle Trees are the containers for your sequences. The Jungle Tree is responsible for managing the execution of your\r\nnodes and their connections."}),"\n",(0,r.jsx)(n.p,{children:"You can have as many trees running at once as you want. Each tree is independent of each other and can be started and\r\nstopped at any time. You cannot, however, have the same tree running multiple times at once."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"creating-jungle-trees",children:"Creating Jungle Trees"}),"\n",(0,r.jsxs)(n.p,{children:["To create a Jungle Tree, right click in your assets folder window and select ",(0,r.jsx)(n.code,{children:"Create > Jungle Tree"}),". This will create a\r\nJungle Tree that you can then open by double clicking on it."]}),"\n",(0,r.jsxs)(n.p,{children:["Check out the ",(0,r.jsx)(n.a,{href:"/docs/jungle-tree-editor",children:"Jungle Tree Editor"})," page for more information on how to edit your Jungle Tree."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"using-jungle-trees",children:"Using Jungle Trees"}),"\n",(0,r.jsxs)(n.p,{children:["It's super easy to start/stop a Jungle Tree. All you need to do is call the ",(0,r.jsx)(n.code,{children:"Start()"})," and ",(0,r.jsx)(n.code,{children:"Stop()"})," methods on the tree.\r\nAll the runtime management is handled for you."]}),"\n",(0,r.jsx)(n.p,{children:"Jungle Trees can be referenced as serialized fields in your scripts. This allows you to easily reference your trees in\r\nthe inspector."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using UnityEngine;\r\nusing Jungle;\r\n\r\npublic class PlayJungleTree : MonoBehaviour\r\n{\r\n    [SerializeField]\r\n    private JungleTree jungleTree;\r\n\r\n    private void Start()\r\n    {\r\n        jungleTree.Start();\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"code-reference",children:"Code Reference"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Namespace: ",(0,r.jsx)(n.code,{children:"Jungle"})]})}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Nodes"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleNode[] Nodes { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"List of all nodes associated with this Jungle Tree."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"State"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public StateFlag State { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"The current state of the Jungle Tree."})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Flag"}),(0,r.jsx)(n.th,{children:"State"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Ready"}),(0,r.jsx)(n.td,{children:"Describes a tree that has never been run and is not currently running."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Running"}),(0,r.jsx)(n.td,{children:"Describes a tree that is currently running."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Finished"}),(0,r.jsx)(n.td,{children:"Describes a tree that is not currently running but has run at some point."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"IsRunning"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool IsRunning { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"True if the tree is currently running."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Time"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public float Time { get; }"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"The amount of time in seconds the tree has been running."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["IsNodeRunning(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool IsNodeRunning(JungleNode node)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns true if the tree is currently running the specified node."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["GetNodeByName(",(0,r.jsx)("span",{class:"DocItemParameter",children:"string"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleNode GetNodeByName(string nodeName)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns a reference to a node with the specified name. Returns null if no node was found."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["GetNodeByUid(",(0,r.jsx)("span",{class:"DocItemParameter",children:"string"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleNode GetNodeByUid(string nodeUid)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns a reference to the node with the specified uid. Returns null if no node was found."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnTreeStarted"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public static event Action<JungleTree> OnTreeStarted"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when a tree is started."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnTreeStopped"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public static event Action<JungleTree> OnTreeStopped"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when a tree is stopped."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnStart"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public event Action OnStart"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when the tree is started."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnStop"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public event Action OnStop"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when the tree is stopped."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnNodeStarted"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public event Action<JungleNode> OnNodeStarted"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when a node is started."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"OnNodeStopped"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public event Action<JungleNode> OnNodeStopped"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Invoked when a node is stopped."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Start()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public void Start()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Starts running the Jungle Tree."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"Stop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public void Stop()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Stops running the Jungle Tree."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["AddRevertAction(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Action"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public string AddRevertAction(Action action)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Adds an action to be invoked when the tree stops. The returned string is a unique identifier for the action."})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["RemoveRevertAction(",(0,r.jsx)("span",{class:"DocItemParameter",children:"string"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public void RemoveRevertAction(string actionUid)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Removes an action from the revert list."})]}),"\n",(0,r.jsxs)(n.admonition,{title:"EDITOR ONLY",type:"warning",children:[(0,r.jsxs)(n.p,{children:["These methods are primarily for internal use only.\r\nYou should ",(0,r.jsx)(n.strong,{children:"NOT"})," call these methods unless you know what you're doing."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"DocItemTitle",children:"GetManifest()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public ref JungleManifest GetManifest()"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Returns a reference to the trees persistent manifest."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["AddNode(",(0,r.jsx)("span",{class:"DocItemParameter",children:"Type, Vector2"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleNode AddNode(Type nodeType, Vector2 graphPosition)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Adds a Jungle Node to the Jungle Tree."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["AddNodes(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode[], Vector2[]"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public JungleNode[] AddNodes(JungleNode[] jungleNodes, Vector2[] graphPositions)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Adds multiple Jungle Nodes to the Jungle Tree."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["RemoveNode(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public void RemoveNode(JungleNode jungleNode)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Removes a node from the Jungle Tree."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["RemoveNodes(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode[]"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public void RemoveNodes(JungleNode[] jungleNodes)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Removes these nodes from the Jungle Tree."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["ConnectNodes(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode, JungleNode, byte"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool ConnectNodes(JungleNode nodeA, JungleNode nodeB, byte portIndex)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Connects two Jungle Nodes together."})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)("span",{class:"DocItemTitle",children:["DisconnectNodes(",(0,r.jsx)("span",{class:"DocItemParameter",children:"JungleNode, JungleNode, byte"}),")"]}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"public bool DisconnectNodes(JungleNode nodeA, JungleNode nodeB, byte portIndex)"}),"\r\n",(0,r.jsx)("br",{}),(0,r.jsx)(n.em,{children:"Disconnects two Jungle Nodes from each other."})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>d});var r=s(7294);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);