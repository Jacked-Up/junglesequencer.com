"use strict";(self.webpackChunkjungle_website=self.webpackChunkjungle_website||[]).push([[716],{1265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var r=t(5893),s=t(1151);const l={title:"Event Node",sidebar_position:4},o=void 0,d={id:"jungle-nodes/event-node",title:"Event Node",description:"The Event Node is a powerful node type in Jungle. The Event Node has zero inputs and outputs to any number of outputs",source:"@site/docs/jungle-nodes/event-node.md",sourceDirName:"jungle-nodes",slug:"/jungle-nodes/event-node",permalink:"/docs/jungle-nodes/event-node",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jungle-nodes/event-node.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Event Node",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Generic Node",permalink:"/docs/jungle-nodes/identity-node"},next:{title:"Custom Node Inspectors",permalink:"/docs/jungle-nodes/advanced/custom-node-inspectors"}},i={},a=[{value:"API",id:"api",level:2},{value:"Methods",id:"methods",level:3},{value:"Abstract",id:"abstract",level:4},{value:"Virtual",id:"virtual",level:4},{value:"Calls",id:"calls",level:4},{value:"Properties",id:"properties",level:3},{value:"Attribute",id:"attribute",level:2},{value:"Attribute Example",id:"attribute-example",level:4},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Event Node is a powerful node type in Jungle. The Event Node has zero inputs and outputs to any number of outputs\r\nthat all can output any types."}),"\n",(0,r.jsx)(n.p,{children:"Event Nodes are called when the Jungle Tree is started."}),"\n",(0,r.jsx)(n.admonition,{title:"NOTE",type:"info",children:(0,r.jsxs)(n.p,{children:["The Event Node is limited to a maximum of ",(0,r.jsx)(n.strong,{children:"256"})," outputs."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using Jungle;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"abstract",children:"Abstract"}),"\n",(0,r.jsx)(n.p,{children:"Called immediately when the Jungle Tree is started."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected abstract void OnStart();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Called every frame while the Event Node is running. Always called after ",(0,r.jsx)(n.strong,{children:"OnStart"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected abstract void OnUpdate();\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.strong,{children:"OnStart"})," and ",(0,r.jsx)(n.strong,{children:"OnUpdate"})," are required methods in all Jungle Nodes. Your code ",(0,r.jsx)(n.strong,{children:"will not"})," compile without them."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"virtual",children:"Virtual"}),"\n",(0,r.jsx)(n.p,{children:"Called immediately after this Event Node is stopped."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected virtual void OnStop() {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Called whenever a validation is requested on this Event Node.\r\n",(0,r.jsx)("br",{}),"Should return any issues found with this node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected virtual Issue[] OnValidation() {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Override this if you want to add dynamic node context in the Jungle Editor.\r\n",(0,r.jsx)("br",{}),"Called on ",(0,r.jsx)(n.em,{children:"every"})," validation pass."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override string GetDetails() {}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"calls",children:"Calls"}),"\n",(0,r.jsx)(n.p,{children:"Sends the event to any nodes connected to this Event Node's output."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void Call(Port.Call[] portCalls) // For multiple port calls\r\n// OR\r\nprotected void Call(Port.Call portCall)    // For only one port call\n"})}),"\n",(0,r.jsx)(n.p,{children:"Stops the Event Node without sending out any port calls."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void Stop()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Both sends the port calls out to the requested ports and stops the Event Node."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"protected void CallAndStop(Port.Call[] portCalls) // For multiple port calls\r\n// OR\r\nprotected void CallAndStop(Port.Call portCall)    // For only one port call\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.p,{children:"Reference to the nodes Jungle Tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public JungleTree JungleTree { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"List of the Jungle Nodes output ports."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Port[] OutputPorts { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Called when the Jungle Node is validated. Callback is true if issues were detected."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Action<bool> OnValidated\n"})}),"\n",(0,r.jsx)(n.p,{children:"True if the Jungle Node is currently running."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsRunning { get; }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes title."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetTitle()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns a brief description of the Jungle Nodes function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetDescription()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes category."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetCategory()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes accent color."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Color GetColor()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes script icon."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public Texture GetIcon()\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"EDITOR ONLY",type:"warning",children:(0,r.jsx)(n.p,{children:"Fetching the Jungle Nodes icon only works in the Unity editor. In a build, this will return a blank white texture."})}),"\n",(0,r.jsx)(n.p,{children:"Returns the Jungle Nodes unique id."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public string GetUid()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns true if the Jungle Node is declared deprecated."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsDeprecated()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns true if the Jungle Node is limited to one instance per Jungle Tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public bool IsLimitedOnePerTree()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns info about the Jungle Nodes input port."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override Port.Info GetInputPortInfo()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns info about the Jungle Nodes output ports."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public override Port.Info[] GetOutputPortsInfo()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"attribute",children:"Attribute"}),"\n",(0,r.jsxs)(n.p,{children:["All Event Nodes are required to have a ",(0,r.jsx)(n.code,{children:"EventNode"})," class attribute defined. This attribute defines the output ports on\r\nthe node."]}),"\n",(0,r.jsxs)(n.p,{children:["Here's a list of all the properties you can define in the ",(0,r.jsx)(n.code,{children:"EventNode"})," attribute:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortNames"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string[]"})}),(0,r.jsx)(n.td,{children:"Defines the names for each output port"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OutputPortTypes"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type[]"})}),(0,r.jsx)(n.td,{children:"Defines the outputted type for each port"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[EventNode(\r\n    OutputPortNames = new string[] { "My Output A",     "My Output B" },\r\n    OutputPortTypes = new Type[]   { typeof(Port.None), typeof(Port.None) }\r\n)]\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The output ports would be named ",(0,r.jsx)(n.em,{children:'"My Output A"'}),' and "My Output B" and both would output the type ',(0,r.jsx)(n.em,{children:'"Port.None"'}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The output port names and types should be defined in the same order."}),"\n",(0,r.jsx)(n.admonition,{title:"WARNING",type:"warning",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"OutputPortNames"})," and ",(0,r.jsx)(n.strong,{children:"OutputPortTypes"})," arrays must ",(0,r.jsx)(n.strong,{children:"always"})," be the same length."]})}),"\n",(0,r.jsx)(n.h4,{id:"attribute-example",children:"Attribute Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[NodeProperties(\r\n    ...\r\n)]\r\n[EventNode(\r\n    OutputPortNames = new string[] { "A Button Press",  "X Button Pressed" },\r\n    OutputPortTypes = new Type[]   { typeof(Port.None), typeof(Port.None) }\r\n)]\r\npublic class InputEventNode : EventNode\r\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we defined ",(0,r.jsx)(n.strong,{children:"InputEventNode"}),"'s output ports to be named ",(0,r.jsx)(n.strong,{children:"A Button Press"})," and ",(0,r.jsx)(n.strong,{children:"X Button Pressed"}),"\r\nand both output type ",(0,r.jsx)(n.strong,{children:"Port.None"}),". With this setup, we could create the logic in this class so that if the A button\r\nwas pressed, it would call output port ",(0,r.jsx)(n.strong,{children:"A Button Press"})," and if the X button was pressed, it would call output port\r\n",(0,r.jsx)(n.strong,{children:"X Button Pressed"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"boilerplate",children:"Boilerplate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\n\r\n[NodeProperties(\r\n    Title = "My Event Node",\r\n    Description = "Example implementation of an event node.",\r\n    Category = "Nodes/Event Node",\r\n    Color = Green,\r\n    Deprecated = false,\r\n    LimitOnePerTree = false\r\n)]\r\n[EventNode(\r\n    OutputPortNames = new string[] { "My Output A",     "My Output B" },\r\n    OutputPortTypes = new Type[]   { typeof(Port.None), typeof(Port.None) }\r\n)]\r\npublic class MyEventNode : EventNode\r\n{\r\n    protected override void OnStart()\r\n    {\r\n        CallAndStop(new []\r\n        {\r\n            new Port.Call(0, new Port.None()),\r\n            new Port.Call(1, new Port.None())\r\n        });\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a simple example of an Event Node that calls different outputs at 5, 10, and 15 seconds intervals."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using Jungle;\r\nusing UnityEngine;\r\n\r\n[NodeProperties(\r\n    Title = "Timed Event Node",\r\n    Description = "Calls different outputs at 5, 10, and 15 seconds intervals.",\r\n    Category = "Events/Timed",\r\n    Color = JungleNode.Blue\r\n)]\r\n[EventNode(\r\n    OutputPortNames = new string[] { "After 5 Seconds", "After 10 Seconds", "After 15 Seconds" },\r\n    OutputPortTypes = new Type[] { typeof(Port.None), typeof(Port.None), typeof(Port.None) }\r\n)]\r\npublic class TimedEventNode : EventNode\r\n{\r\n    private float _startTime;\r\n    private bool _called5Seconds;\r\n    private bool _called10Seconds;\r\n    private bool _called15Seconds;\r\n\r\n    protected override void OnStart()\r\n    {\r\n        // Record the start time\r\n        _startTime = Time.unscaledTime;\r\n        _called5Seconds = false;\r\n        _called10Seconds = false;\r\n        _called15Seconds = false;\r\n    }\r\n\r\n    protected override void OnUpdate()\r\n    {\r\n        float elapsedTime = Time.unscaledTime - _startTime;\r\n\r\n        // Check the elapsed time and call the appropriate outputs\r\n        if (!_called5Seconds && elapsedTime >= 5)\r\n        {\r\n            Call(new Port.Call(0, new Port.None())); // Call "After 5 Seconds"\r\n            _called5Seconds = true;\r\n        }\r\n\r\n        if (!_called10Seconds && elapsedTime >= 10)\r\n        {\r\n            Call(new Port.Call(1, new Port.None())); // Call "After 10 Seconds"\r\n            _called10Seconds = true;\r\n        }\r\n\r\n        if (!_called15Seconds && elapsedTime >= 15)\r\n        {\r\n            CallAndStop(new Port.Call(2, new Port.None())); // Call "After 15 Seconds" and stop the node\r\n            _called15Seconds = true;\r\n        }\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>o});var r=t(7294);const s={},l=r.createContext(s);function o(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);